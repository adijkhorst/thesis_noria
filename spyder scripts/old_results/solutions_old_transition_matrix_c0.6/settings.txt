### notes:
## oude wind transition matrix met innerproducts en threshold 0.1
## costs 1, 0.6
## accuracy 1, 0.9


np.random.seed(0)

line_layer_path = 'C:/Users/Anne-Fleur/OneDrive - Noria/Documents - Noria Internship/Anne Fleur/1. Working Folder/3. GIS/Network FCLM/delft_final_network.geojson'

# import the networkx graph from network_creation.py, get transition probabilities and initial probabilities
G = create_network(line_layer_path)
transition_probabilities_wind.get_transition_probabilities(G)
get_probabilities(G)

b = np.array([G.nodes[node]['init_probability'] for node in G.nodes()])

n = len(G.nodes())
K = 2

stuck = [G.nodes[node]['stuck_probability'] for node in G.nodes()]
# stuck = np.random.uniform(0.0, 0.6, n)
stuck_matrix = np.repeat([stuck], len(stuck), axis = 0).T

A = nx.adjacency_matrix(G, nodelist = G.nodes(), weight = 'transition_probability').toarray()
C = (1-stuck_matrix) * A

catching = np.array([G.nodes[node]['catching_probability'] for node in G.nodes()])
# catching = np.repeat([catching], 2, axis = 0).T
catching = np.stack((catching, 0.9*catching)).T
# impact = [G.nodes[node]['impact_factor'] for node in G.nodes()]

attrs = {}
for index, node in enumerate(G.nodes()):
    attrs[node] = {'label': index+1, 'position' : node}
nx.set_node_attributes(G, attrs)

### instance parameters

no_system = no_catching_system()
### later proberen met sets K_i
K_i = {}
for node in G.nodes():
    if node in no_system:
        K_i[G.nodes[node]['label']] = {}
    else:
        K_i[G.nodes[node]['label']] = {1, 2}


betas = np.random.uniform(0.1, 0.8, (n, K))
betas = catching

w = 0.0001 #0.1% should be caught per unit cost
c = [1, 0.6]
B = 7.5

alpha = np.random.uniform(0.0001, 0.01, n)
alpha = np.ones(n)*0.001
# alpha = impact